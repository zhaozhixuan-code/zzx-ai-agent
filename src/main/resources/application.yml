server:
  port: 8080
  servlet:
    context-path: /api
spring:
  application:
    name: zzx-ai-agent
  profiles:
    active: local
  datasource:
    # MySql
    one:
      username: ${ai-agent.spring.datasource.one.username}
      password: ${ai-agent.spring.datasource.one.password}
      jdbc-url: jdbc:mysql://${ai-agent.spring.datasource.one.host}:${ai-agent.spring.datasource.one.port}/${ai-agent.spring.datasource.one.databases}?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
      driver-class-name: com.mysql.cj.jdbc.Driver
    # PGVector
    two:
      jdbc-url: jdbc:postgresql://pgm-bp1plb4o54qd8dx0so.pg.rds.aliyuncs.com:5432/zzx_ai_agent
      username: ${ai-agent.spring.datasource.two.username}
      password: ${ai-agent.spring.datasource.two.password}

  ai:
    dashscope:
      api-key: "${ai-agent.spring.ai.dashscope.api-key}"
      chat:
        options:
          model: "${ai-agent.spring.ai.dashscope.chat-model}"
    vectorstore:
      pgvector:
        index-type: HNSW
        dimensions: 1536
        distance-type: COSINE_DISTANCE
        max-document-batch-size: 10000 # Optional: Maximum number of documents per batch


mybatis:
  #mapper配置文件
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.zzx.zzxaiagent.entity.po


# springdoc-openapi 接口文档配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.zzx.zzxaiagent.controller
# knife4j 的增强配置，不需要可以去掉
knife4j:
  enable: true
  setting:
    language: zh_cn

